package bot

// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞

import (
	"DiaryEntryBot/internal/services"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	notificationTimer *time.Timer
)

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func handleMessage(update tgbotapi.Update, bot *tgbotapi.BotAPI, service *services.DiaryService) {
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			handleStartCommand(update, bot)
			return
		case "view":
			viewEntries(update, bot, service)
			return
		case "edit": 
			editEntry(update, bot, service)
			return
		case "delete":
			deleteEntry(update, bot, service)
			return
		}
	}

	userID := update.Message.From.ID
	content := update.Message.Text

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
	service.CreateEntry(userID, content)

	resetTimer(update.Message.Chat.ID, bot)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
	bot.Send(msg)
}

// viewEntries –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
func viewEntries(update tgbotapi.Update, bot *tgbotapi.BotAPI, service *services.DiaryService) {
	userID := update.Message.From.ID
	entries, err := service.GetEntries(userID)

	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.")
		bot.Send(msg)
		return
	}

	var response string
	for _, entry := range entries {
		response += fmt.Sprintf("ID: %d\n–î–∞—Ç–∞: %s\n%s\n\n", entry.ID, entry.CreatedAt.Format("02.01.2006 15:04"), entry.Content)
	}

	if response == "" {
		response = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
	bot.Send(msg)
}

// editEntry —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
func editEntry(update tgbotapi.Update, bot *tgbotapi.BotAPI, service *services.DiaryService) {
	parts := strings.SplitN(update.Message.Text, " ", 3)
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit <ID> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
		bot.Send(msg)
		return
	}

	entryID, err := strconv.ParseUint(parts[1], 10, 32)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏.")
		bot.Send(msg)
		return
	}

	content := parts[2]
	userID := update.Message.From.ID

	err = service.UpdateEntry(uint(entryID), userID, content)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
	bot.Send(msg)
}

// deleteEntry —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞
func deleteEntry(update tgbotapi.Update, bot *tgbotapi.BotAPI, service *services.DiaryService) {
	parts := strings.SplitN(update.Message.Text, " ", 2)
	if len(parts) < 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <ID>")
		bot.Send(msg)
		return
	}

	entryID, err := strconv.ParseUint(parts[1], 10, 32)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏.")
		bot.Send(msg)
		return
	}

	userID := update.Message.From.ID

	err = service.DeleteEntry(uint(entryID), userID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
	bot.Send(msg)
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func handleStartCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	welcomeMessage := "–ü—Ä–∏–≤–µ—Ç! üòä –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫-–±–æ—Ç. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫. " +
		"–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n" +
		"/edit <ID> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å\n" +
		"/delete <ID> - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMessage)
	bot.Send(msg)
}

// sendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
func sendNotification(chatID int64, bot *tgbotapi.BotAPI) {
	msg := tgbotapi.NewMessage(chatID, "–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π! üìî")
	bot.Send(msg)

	resetTimer(chatID, bot)
}

func resetTimer(chatID int64, bot *tgbotapi.BotAPI) {
	if notificationTimer != nil {
		notificationTimer.Stop()
	}

	notificationTimer = time.AfterFunc(24 * time.Hour, func() {
		sendNotification(chatID, bot)
	})
}